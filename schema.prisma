datasource db {
  provider          = "postgres"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING_SHADOW") // used for migrations
  extensions        = [pgvector(map: "vector")] // Add the pgvector extension
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // Enable the postgresqlExtensions. Currently in preview
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  prolificId   String?
  name         String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         String[]       @default(["USER"])
  isAdmin      Boolean        @default(false)
  chats        Chat[]
  edges        Edge[]
  Deliberation Deliberation[]
  Demographic  Demographic?
}

model Demographic {
  userId                 Int
  age                    Int?
  sex                    String?
  usPoliticalAffiliation String?
  user                   User    @relation(fields: [userId], references: [id])

  @@id([userId])
}

enum DeliberationSetupStatus {
  generating_questions
  generating_contexts
  generating_graph
  ready
}

model Deliberation {
  id                   Int                     @id @default(autoincrement())
  title                String
  welcomeText          String?
  questionIntroText    String?
  topic                String
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  createdBy            Int
  setupStatus          DeliberationSetupStatus @default(generating_contexts)
  user                 User                    @relation(fields: [createdBy], references: [id])
  valuesCards          ValuesCard[]
  edges                Edge[]
  questions            Question[]
  contexts             Context[]
  chats                Chat[]
  canonicalValuesCards CanonicalValuesCard[]
  edgeHypotheses       EdgeHypothesis[]
  Intervention         Intervention[]
}

model EmailCodes {
  email              String   @unique
  loginCode          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  loginCodeExpiresAt DateTime
  register           Boolean  @default(false)
  extraData          Json?
}

model ValuesCard {
  id                  Int                          @id @default(autoincrement())
  title               String
  description         String
  policies            String[]
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  canonicalCardId     Int?
  questionId          Int
  seedGenerationRunId String? // Present if the card was generated as a seed value.
  chatId              String?                      @unique // Present if the card was articulated in a chat.
  chat                Chat?                        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  question            Question                     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  canonicalCard       CanonicalValuesCard?         @relation(fields: [canonicalCardId], references: [id], onDelete: SetNull)
  embedding           Unsupported("vector(1536)")?
  deliberationId      Int
  deliberation        Deliberation                 @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
}

model CanonicalValuesCard {
  id                 Int                          @id @default(autoincrement())
  title              String
  description        String
  policies           String[]
  isArchived         Boolean                      @default(false)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  embedding          Unsupported("vector(1536)")?
  valuesCards        ValuesCard[]
  edgesFrom          Edge[]                       @relation("FromValueRelation")
  edgesTo            Edge[]                       @relation("ToValueRelation")
  edgeHypothesisFrom EdgeHypothesis[]             @relation("FromHypothesizedValueRelation")
  edgeHypothesisTo   EdgeHypothesis[]             @relation("ToHypothesizedValueRelation")
  deliberationId     Int
  deliberation       Deliberation                 @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@unique([title, description, policies]) // Prevent duplicate insertions.
}

model Chat {
  id             String       @id
  userId         Int
  transcript     Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  evaluation     Json?
  copiedFromId   String? // In order to filter out copied chats from analytics and other queries.
  questionId     Int
  ValuesCard     ValuesCard?
  user           User         @relation(fields: [userId], references: [id])
  copiedFrom     Chat?        @relation("ChatToCopiedFrom", fields: [copiedFromId], references: [id], onDelete: Cascade)
  copies         Chat[]       @relation("ChatToCopiedFrom")
  deliberationId Int
  deliberation   Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
  Question       Question     @relation(fields: [questionId], references: [id])
}

enum EdgeType {
  upgrade
  no_upgrade
  not_sure
}

model Edge {
  userId         Int
  fromId         Int
  toId           Int
  story          String
  contextId      String
  type           EdgeType            @default(upgrade)
  comment        String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User                @relation(fields: [userId], references: [id])
  from           CanonicalValuesCard @relation("FromValueRelation", fields: [fromId], references: [id], onDelete: Cascade)
  to             CanonicalValuesCard @relation("ToValueRelation", fields: [toId], references: [id], onDelete: Cascade)
  context        Context             @relation(fields: [contextId, deliberationId], references: [id, deliberationId])
  deliberationId Int
  deliberation   Deliberation        @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@id([userId, fromId, toId])
}

model EdgeHypothesis {
  fromId          Int
  toId            Int
  hypothesisRunId String
  story           String?
  contextId       String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  isArchived      Boolean              @default(false)
  from            CanonicalValuesCard? @relation("FromHypothesizedValueRelation", fields: [fromId], references: [id], onDelete: Cascade)
  to              CanonicalValuesCard? @relation("ToHypothesizedValueRelation", fields: [toId], references: [id], onDelete: Cascade)
  context         Context              @relation(fields: [contextId, deliberationId], references: [id, deliberationId])
  deliberationId  Int
  deliberation    Deliberation         @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@id([fromId, toId, contextId, deliberationId])
}

model Context {
  id                   String
  deliberationId       Int
  embedding            Unsupported("vector(1536)")?
  createdInChatId      String? // If the context comes from a user's chat.
  deliberation         Deliberation                 @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
  ContextsForQuestions ContextsForQuestions[]
  Edge                 Edge[]
  EdgeHypothesis       EdgeHypothesis[]
  createdAt            DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
  Intervention         Intervention[]

  @@id([id, deliberationId])
}

model Question {
  id                   Int                    @id @default(autoincrement())
  question             String
  title                String
  seedMessage          String?
  ContextsForQuestions ContextsForQuestions[]
  deliberationId       Int
  isArchived           Boolean                @default(false)
  deliberation         Deliberation           @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
  chats                Chat[]
  ValuesCard           ValuesCard[]
  Intervention         Intervention[]
}

model InterventionPrecedence {
  id             Int          @id @default(autoincrement())
  interventionId Int
  description    String?
  link           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  intervention   Intervention @relation(fields: [interventionId], references: [id], onDelete: Cascade)
}

model Intervention {
  id                     Int                      @id @default(autoincrement())
  text                   String
  graph                  Json
  contextId              String
  questionId             Int
  deliberationId         Int
  shouldDisplay          Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  context                Context                  @relation(fields: [contextId, deliberationId], references: [id, deliberationId], onDelete: Cascade)
  question               Question                 @relation(fields: [questionId], references: [id], onDelete: Cascade)
  deliberation           Deliberation             @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
  InterventionPrecedence InterventionPrecedence[]
}

model ContextsForQuestions {
  context        Context  @relation(fields: [contextId, deliberationId], references: [id, deliberationId], onDelete: Cascade)
  question       Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  application    String?
  contextId      String
  questionId     Int
  deliberationId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([contextId, questionId, deliberationId])
}
